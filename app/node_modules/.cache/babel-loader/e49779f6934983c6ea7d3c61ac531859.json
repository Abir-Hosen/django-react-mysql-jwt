{"ast":null,"code":"import produce from 'immer';\nimport * as types from './types';\nconst authInfoState = {\n  msg: ''\n};\nexport const authInfo = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : authInfoState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload,\n    meta,\n    errorMessage\n  } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case types.SAVE_USER_INFO:\n        break;\n\n      case types.SAVE_USER_INFO_SUCCESS:\n        draft.msg = meta.successMessage;\n        break;\n\n      case types.SAVE_USER_INFO_FAILED:\n        draft.msg = meta.errorMessage;\n        break;\n\n      case types.USER_LOGIN:\n        console.log('user login', payload);\n        break;\n\n      case types.USER_LOGIN_SUCCESS:\n        console.log('user login success', payload);\n        draft.msg = meta.successMessage;\n        break;\n\n      case types.USER_LOGIN_FAILED:\n        console.log('user login failed', payload);\n        draft.msg = meta.errorMessage;\n        break;\n\n      case types.SET_MSG:\n        draft.msg = payload;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/authResources/reducer.js"],"names":["produce","types","authInfoState","msg","authInfo","state","action","type","payload","meta","errorMessage","draft","SAVE_USER_INFO","SAVE_USER_INFO_SUCCESS","successMessage","SAVE_USER_INFO_FAILED","USER_LOGIN","console","log","USER_LOGIN_SUCCESS","USER_LOGIN_FAILED","SET_MSG"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE;AADa,CAAtB;AAIA,OAAO,MAAMC,QAAQ,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BH,aAA0B;AAAA,MAAXI,MAAW;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,MAAwCJ,MAA9C;AACA,SAAON,OAAO,CAACK,KAAD,EAASM,KAAD,IAAW;AAC7B,YAAQJ,IAAR;AAEI,WAAKN,KAAK,CAACW,cAAX;AACI;;AACJ,WAAKX,KAAK,CAACY,sBAAX;AACIF,QAAAA,KAAK,CAACR,GAAN,GAAYM,IAAI,CAACK,cAAjB;AACA;;AACJ,WAAKb,KAAK,CAACc,qBAAX;AACIJ,QAAAA,KAAK,CAACR,GAAN,GAAYM,IAAI,CAACC,YAAjB;AACA;;AAEJ,WAAKT,KAAK,CAACe,UAAX;AACIC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,OAA1B;AACA;;AACJ,WAAKP,KAAK,CAACkB,kBAAX;AACIF,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCV,OAAlC;AACAG,QAAAA,KAAK,CAACR,GAAN,GAAYM,IAAI,CAACK,cAAjB;AACA;;AACJ,WAAKb,KAAK,CAACmB,iBAAX;AACIH,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCV,OAAjC;AACAG,QAAAA,KAAK,CAACR,GAAN,GAAYM,IAAI,CAACC,YAAjB;AACA;;AAEJ,WAAKT,KAAK,CAACoB,OAAX;AACIV,QAAAA,KAAK,CAACR,GAAN,GAAYK,OAAZ;AACA;;AACJ;AACI,eAAOH,KAAP;AA3BR;AA8BH,GA/Ba,CAAd;AAgCH,CAlCM","sourcesContent":["import produce from 'immer';\nimport * as types from './types';\n\nconst authInfoState = {\n    msg: '',\n}\n\nexport const authInfo = (state = authInfoState, action) => {\n    const { type, payload, meta, errorMessage } = action;\n    return produce(state, (draft) => {\n        switch (type) {\n\n            case types.SAVE_USER_INFO:\n                break;\n            case types.SAVE_USER_INFO_SUCCESS:\n                draft.msg = meta.successMessage\n                break;\n            case types.SAVE_USER_INFO_FAILED:\n                draft.msg = meta.errorMessage\n                break;\n\n            case types.USER_LOGIN:\n                console.log('user login', payload)\n                break;\n            case types.USER_LOGIN_SUCCESS:\n                console.log('user login success', payload)\n                draft.msg = meta.successMessage\n                break;\n            case types.USER_LOGIN_FAILED:\n                console.log('user login failed', payload)\n                draft.msg = meta.errorMessage\n                break;\n\n            case types.SET_MSG:\n                draft.msg = payload\n                break;\n            default:\n                return state;\n\n        }\n    });\n}"]},"metadata":{},"sourceType":"module"}