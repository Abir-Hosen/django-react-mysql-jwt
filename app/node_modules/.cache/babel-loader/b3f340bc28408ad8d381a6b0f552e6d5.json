{"ast":null,"code":"import * as types from './types'; // common state control actions\n\nexport const deleteMessage = () => ({\n  type: types.DELETE_MESSAGE,\n  meta: {\n    api: false,\n    successMessage: 'Message deleted successfully',\n    errorMessage: \"Message failed to delete\"\n  }\n});\nexport const deleteRoute = () => ({\n  type: types.DELETE_ROUTE,\n  meta: {\n    api: false,\n    successMessage: 'Route deleted successfully',\n    errorMessage: \"Route failed to delete\"\n  }\n});\nexport const setLoader = (status, time) => ({\n  type: types.SET_LOADER,\n  payload: {\n    status: status,\n    time: time\n  },\n  meta: {\n    api: false,\n    successMessage: 'Loader seted successfully',\n    errorMessage: \"Loader failed to set\"\n  }\n});\nexport const setProgress = payload => ({\n  type: types.SET_PROGRESS,\n  payload: payload,\n  meta: {\n    api: false,\n    successMessage: 'progress seted successfully',\n    errorMessage: \"progress failed to set\"\n  }\n}); // api control actions\n\nexport const getProviderList = () => ({\n  type: types.GET_SERVER_PROVIDER,\n  payload: {\n    path: `/serverproviders/all/details`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server provider fetch successfully',\n    errorMessage: \"Server  provider failed to fetch\"\n  }\n});\nexport const getProviderDetails = payload => ({\n  type: types.GET_PROVIDER_DETAILS,\n  payload: {\n    path: `/serverproviders/os/size/location/details?Provider_ID=${payload}`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server os fetch successfully',\n    errorMessage: \"Server  os failed to fetch\"\n  }\n});\nexport const getServerSizeDetails = (providerId, sizeId) => ({\n  type: types.GET_SERVER_SIZE_DETAILS,\n  payload: {\n    path: `/serverproviders/size/price/details?Provider_ID=${providerId}&Size_ID=${sizeId}`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server size details fetch successfully',\n    errorMessage: \"Server  size details failed to fetch\"\n  }\n});\nexport const saveLaunchServerInfo = payload => ({\n  type: types.SAVE_SERVER_LAUNCH_INFO,\n  payload: {\n    data: payload\n  },\n  meta: {\n    api: false,\n    successMessage: 'Server data saved successfully',\n    errorMessage: \"Server data failed to save\"\n  }\n});\nexport const resetLaunchServerInfo = payload => ({\n  type: types.RESET_SERVER_LAUNCH_INFO,\n  payload: {\n    data: payload\n  },\n  meta: {\n    api: false,\n    successMessage: 'Server data reset successfully',\n    errorMessage: \"Server data failed to reset\"\n  }\n});\nexport const launchNow = parameter => ({\n  type: types.LAUNCH_NOW,\n  payload: {\n    path: `/instance/create?${parameter}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server launch successfully',\n    errorMessage: \"Server  failed to launch\"\n  }\n});\nexport const getServerList = () => ({\n  type: types.SERVER_LIST,\n  payload: {\n    path: `/instance/list/all`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server list fetch successfully',\n    errorMessage: \"Server list failed to fetch\"\n  }\n});\nexport const startServer = (provider, instance) => ({\n  type: types.START_SERVER,\n  payload: {\n    path: `/instance/boot?Provider_ID=${provider}&Instance_ID=${instance}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server Start successfully',\n    errorMessage: \"Server failed to Start\"\n  }\n});\nexport const restartServer = (provider, instance) => ({\n  type: types.RESTART_SERVER,\n  payload: {\n    path: `/instance/reboot?Provider_ID=${provider}&Instance_ID=${instance}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server Restart successfully',\n    errorMessage: \"Server failed to Restart\"\n  }\n});\nexport const stopServer = (provider, instance) => ({\n  type: types.STOP_SERVER,\n  payload: {\n    path: `/instance/shutdown?Provider_ID=${provider}&Instance_ID=${instance}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server Stop successfully',\n    errorMessage: \"Server failed to Stop\"\n  }\n});\nexport const deleteServer = (provider, instance) => ({\n  type: types.DELETE_SERVER,\n  payload: {\n    path: `/instance/delete?Provider_ID=${provider}&Instance_ID=${instance}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server Deleted successfully',\n    errorMessage: \"Server failed to Delete\"\n  }\n});\nexport const fetchMasterCredentials = instanceId => ({\n  type: types.FETCH_MASTER_CREDENTIALS,\n  payload: {\n    path: `/instance/master/credential?Instance_ID=${instanceId}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Master credential fetch successfully',\n    errorMessage: \"Master credential failed to fetch\"\n  }\n});\nexport const backupServer = (providerId, instanceId, snapName) => ({\n  type: types.BACKUP_SERVER,\n  payload: {\n    path: `/instance/snapshot?Provider_ID=${providerId}&Instance_ID=${instanceId}&Snapshot_Name=${snapName}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server backup successfll',\n    errorMessage: \"Backup server failed\"\n  }\n});\nexport const changeBackupServerStatus = (providerId, instanceId, status) => ({\n  type: types.CHANGE_BACKUP_SERVER_STATUS,\n  payload: {\n    path: `/instance/backup?Provider_ID=${providerId}&Instance_ID=${instanceId}&Enable=${status}`,\n    method: 'POST'\n  },\n  meta: {\n    api: true,\n    successMessage: `Server backup ${status ? 'enabled ' : 'disabled '} successflly`,\n    errorMessage: `Backup server failed to ${status ? 'enable' : 'disable'}`\n  }\n});","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/serverResources/action.js"],"names":["types","deleteMessage","type","DELETE_MESSAGE","meta","api","successMessage","errorMessage","deleteRoute","DELETE_ROUTE","setLoader","status","time","SET_LOADER","payload","setProgress","SET_PROGRESS","getProviderList","GET_SERVER_PROVIDER","path","method","getProviderDetails","GET_PROVIDER_DETAILS","getServerSizeDetails","providerId","sizeId","GET_SERVER_SIZE_DETAILS","saveLaunchServerInfo","SAVE_SERVER_LAUNCH_INFO","data","resetLaunchServerInfo","RESET_SERVER_LAUNCH_INFO","launchNow","parameter","LAUNCH_NOW","getServerList","SERVER_LIST","startServer","provider","instance","START_SERVER","restartServer","RESTART_SERVER","stopServer","STOP_SERVER","deleteServer","DELETE_SERVER","fetchMasterCredentials","instanceId","FETCH_MASTER_CREDENTIALS","backupServer","snapName","BACKUP_SERVER","changeBackupServerStatus","CHANGE_BACKUP_SERVER_STATUS"],"mappings":"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","sourcesContent":["import * as types from './types';\n\n// common state control actions\nexport const deleteMessage = () => ({\n    type: types.DELETE_MESSAGE,\n    meta: {\n        api: false,\n        successMessage: 'Message deleted successfully',\n        errorMessage: \"Message failed to delete\",\n    },\n});\n\nexport const deleteRoute = () => ({\n    type: types.DELETE_ROUTE,\n    meta: {\n        api: false,\n        successMessage: 'Route deleted successfully',\n        errorMessage: \"Route failed to delete\",\n    },\n});\nexport const setLoader = (status, time) => ({\n    type: types.SET_LOADER,\n    payload : {\n        status: status,\n        time: time\n    },\n    meta: {\n        api: false,\n        successMessage: 'Loader seted successfully',\n        errorMessage: \"Loader failed to set\",\n    },\n});\nexport const setProgress = (payload) => ({\n    type: types.SET_PROGRESS,\n    payload : payload,\n    meta: {\n        api: false,\n        successMessage: 'progress seted successfully',\n        errorMessage: \"progress failed to set\",\n    },\n});\n\n// api control actions\nexport const getProviderList = () => ({\n    type: types.GET_SERVER_PROVIDER,\n    payload: {\n        path: `/serverproviders/all/details`,\n        method: 'GET',\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server provider fetch successfully',\n        errorMessage: \"Server  provider failed to fetch\",\n    },\n});\n\nexport const getProviderDetails = (payload) => ({\n    type: types.GET_PROVIDER_DETAILS,\n    payload: {\n        path: `/serverproviders/os/size/location/details?Provider_ID=${payload}`,\n        method: 'GET',\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server os fetch successfully',\n        errorMessage: \"Server  os failed to fetch\",\n    },\n});\n\nexport const getServerSizeDetails = (providerId, sizeId) => ({\n    type: types.GET_SERVER_SIZE_DETAILS,\n    payload: {\n        path: `/serverproviders/size/price/details?Provider_ID=${providerId}&Size_ID=${sizeId}`,\n        method: 'GET',\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server size details fetch successfully',\n        errorMessage: \"Server  size details failed to fetch\",\n    },\n});\n\nexport const saveLaunchServerInfo = (payload) => ({\n    type: types.SAVE_SERVER_LAUNCH_INFO,\n    payload: {\n        data: payload\n    },\n    meta: {\n        api: false,\n        successMessage: 'Server data saved successfully',\n        errorMessage: \"Server data failed to save\",\n    },\n});\n\nexport const resetLaunchServerInfo = (payload) => ({\n    type: types.RESET_SERVER_LAUNCH_INFO,\n    payload: {\n        data: payload,\n    },\n    meta: {\n        api: false,\n        successMessage: 'Server data reset successfully',\n        errorMessage: \"Server data failed to reset\",\n    },\n});\n\nexport const launchNow = (parameter) => ({\n    type: types.LAUNCH_NOW,\n    payload: {\n        path: `/instance/create?${parameter}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server launch successfully',\n        errorMessage: \"Server  failed to launch\",\n    },\n});\n\nexport const getServerList = () => ({\n    type: types.SERVER_LIST,\n    payload: {\n        path: `/instance/list/all`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server list fetch successfully',\n        errorMessage: \"Server list failed to fetch\",\n    },\n});\n\nexport const startServer = (provider, instance) => ({\n    type: types.START_SERVER,\n    payload: {\n        path: `/instance/boot?Provider_ID=${provider}&Instance_ID=${instance}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server Start successfully',\n        errorMessage: \"Server failed to Start\",\n    },\n});\n\n\nexport const restartServer = (provider, instance) => ({\n    type: types.RESTART_SERVER,\n    payload: {\n        path: `/instance/reboot?Provider_ID=${provider}&Instance_ID=${instance}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server Restart successfully',\n        errorMessage: \"Server failed to Restart\",\n    },\n});\n\n\nexport const stopServer = (provider, instance) => ({\n    type: types.STOP_SERVER,\n    payload: {\n        path: `/instance/shutdown?Provider_ID=${provider}&Instance_ID=${instance}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server Stop successfully',\n        errorMessage: \"Server failed to Stop\",\n    },\n});\n\nexport const deleteServer = (provider, instance) => ({\n    type: types.DELETE_SERVER,\n    payload: {\n        path: `/instance/delete?Provider_ID=${provider}&Instance_ID=${instance}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server Deleted successfully',\n        errorMessage: \"Server failed to Delete\",\n    },\n});\n\nexport const fetchMasterCredentials = (instanceId) => ({\n    type: types.FETCH_MASTER_CREDENTIALS,\n    payload: {\n        path: `/instance/master/credential?Instance_ID=${instanceId}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Master credential fetch successfully',\n        errorMessage: \"Master credential failed to fetch\",\n    },\n});\n\nexport const backupServer = (providerId, instanceId, snapName) => ({\n    type: types.BACKUP_SERVER,\n    payload: {\n        path: `/instance/snapshot?Provider_ID=${providerId}&Instance_ID=${instanceId}&Snapshot_Name=${snapName}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server backup successfll',\n        errorMessage: \"Backup server failed\",\n    },\n});\n\nexport const changeBackupServerStatus = (providerId, instanceId, status) => ({\n    type: types.CHANGE_BACKUP_SERVER_STATUS,\n    payload: {\n        path: `/instance/backup?Provider_ID=${providerId}&Instance_ID=${instanceId}&Enable=${status}`,\n        method: 'POST'\n    },\n    meta: {\n        api: true,\n        successMessage: `Server backup ${status ? 'enabled ' : 'disabled '} successflly`,\n        errorMessage: `Backup server failed to ${status ? 'enable' : 'disable'}`,\n    },\n});\n\n\n\n"]},"metadata":{},"sourceType":"module"}