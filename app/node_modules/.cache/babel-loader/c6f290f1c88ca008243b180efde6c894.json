{"ast":null,"code":"import * as types from './types';\nexport const registerUser = () => ({\n  type: types.GET_SERVER_PROVIDER,\n  payload: {\n    path: `/serverproviders/all/details`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server provider fetch successfully',\n    errorMessage: \"Server  provider failed to fetch\"\n  }\n});\nexport const saveAuthUser = payload => ({\n  type: types.SAVE_USER_INFO,\n  payload: {\n    path: `/`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'User registered successfully',\n    errorMessage: \"User registration failed\"\n  }\n});\nexport const clearState = () => ({\n  type: 'RESET_APP',\n  meta: {\n    api: false,\n    successMessage: 'Successfully State Clear',\n    errorMessage: \"State not clear\"\n  }\n});","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/authResources/action.js"],"names":["types","registerUser","type","GET_SERVER_PROVIDER","payload","path","method","meta","api","successMessage","errorMessage","saveAuthUser","SAVE_USER_INFO","clearState"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAGA,OAAO,MAAMC,YAAY,GAAG,OAAO;AAC/BC,EAAAA,IAAI,EAAEF,KAAK,CAACG,mBADmB;AAE/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAG,8BADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFsB;AAM/BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,GAAG,EAAE,IADH;AAEFC,IAAAA,cAAc,EAAE,oCAFd;AAGFC,IAAAA,YAAY,EAAE;AAHZ;AANyB,CAAP,CAArB;AAcP,OAAO,MAAMC,YAAY,GAAIP,OAAD,KAAc;AACxCF,EAAAA,IAAI,EAAEF,KAAK,CAACY,cAD4B;AAExCR,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAG,GADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAF+B;AAMxCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,GAAG,EAAE,IADH;AAEFC,IAAAA,cAAc,EAAE,8BAFd;AAGFC,IAAAA,YAAY,EAAE;AAHZ;AANkC,CAAd,CAArB;AAcP,OAAO,MAAMG,UAAU,GAAG,OAAO;AAC/BX,EAAAA,IAAI,EAAE,WADyB;AAE/BK,EAAAA,IAAI,EAAE;AACJC,IAAAA,GAAG,EAAE,KADD;AAEJC,IAAAA,cAAc,EAAE,0BAFZ;AAGJC,IAAAA,YAAY,EAAE;AAHV;AAFyB,CAAP,CAAnB","sourcesContent":["import * as types from './types';\n\n\nexport const registerUser = () => ({\n    type: types.GET_SERVER_PROVIDER,\n    payload: {\n        path: `/serverproviders/all/details`,\n        method: 'GET',\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server provider fetch successfully',\n        errorMessage: \"Server  provider failed to fetch\",\n    },\n});\n\n\nexport const saveAuthUser = (payload) => ({\n  type: types.SAVE_USER_INFO,\n  payload: {\n      path: `/`,\n      method: 'GET',\n  },\n  meta: {\n      api: true,\n      successMessage: 'User registered successfully',\n      errorMessage: \"User registration failed\",\n  },\n});\n\n\nexport const clearState = () => ({\n  type: 'RESET_APP',\n  meta: {\n    api: false,\n    successMessage: 'Successfully State Clear',\n    errorMessage: \"State not clear\",\n  },\n});"]},"metadata":{},"sourceType":"module"}