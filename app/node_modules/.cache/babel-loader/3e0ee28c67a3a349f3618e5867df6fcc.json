{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { persistReducer } from 'redux-persist'; // Redux Thunk middleware allows you to write action creators that return a function instead of an action. \n// The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. \n\nimport thunkMiddleware from 'redux-thunk'; // Redux DevTools for debugging application's state changes. The extension provides power-ups for your Redux development workflow.\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { loggerMiddleware, apiMiddleware } from './middlewares'; // import loggerMiddleware from './middlewares/loggerMiddleware'\n// import apiMiddleware from './middlewares/apiMiddleware'\n\nimport { monitorReducerEnhancer } from './enhencers';\nimport rootReducer from './rootReducer';\nimport storage from 'redux-persist/lib/storage';\nconst persistConfig = {\n  key: 'root',\n  storage // whitelist: ['serverConfig']\n\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunkMiddleware, apiMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const enhancers = [middlewareEnhancer, monitorReducerEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n  const store = createStore(persistedReducer, preloadedState, composedEnhancers);\n  return store;\n}","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/configureStore.js"],"names":["applyMiddleware","createStore","persistReducer","thunkMiddleware","composeWithDevTools","loggerMiddleware","apiMiddleware","monitorReducerEnhancer","rootReducer","storage","persistConfig","key","persistedReducer","configureStore","preloadedState","middlewares","middlewareEnhancer","enhancers","composedEnhancers","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CACA;AACA;;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CACA;;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,eAAhD,C,CACA;AACA;;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBF,EAAAA,OAFkB,CAGlB;;AAHkB,CAAtB;AAMA,MAAMG,gBAAgB,GAAGV,cAAc,CAACQ,aAAD,EAAgBF,WAAhB,CAAvC;AAEA,eAAe,SAASK,cAAT,CAAwBC,cAAxB,EAAwC;AAEnD,QAAMC,WAAW,GAAG,CAACV,gBAAD,EAAmBF,eAAnB,EAAoCG,aAApC,CAApB;AACA,QAAMU,kBAAkB,GAAGhB,eAAe,CAAC,GAAGe,WAAJ,CAA1C;AACA,QAAME,SAAS,GAAG,CAACD,kBAAD,EAAqBT,sBAArB,CAAlB;AACA,QAAMW,iBAAiB,GAAGd,mBAAmB,CAAC,GAAGa,SAAJ,CAA7C;AAEA,QAAME,KAAK,GAAGlB,WAAW,CAACW,gBAAD,EAAmBE,cAAnB,EAAmCI,iBAAnC,CAAzB;AAEA,SAAOC,KAAP;AACH","sourcesContent":["import { applyMiddleware, createStore } from 'redux'\nimport { persistReducer } from 'redux-persist'\n// Redux Thunk middleware allows you to write action creators that return a function instead of an action. \n// The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. \nimport thunkMiddleware from 'redux-thunk'\n// Redux DevTools for debugging application's state changes. The extension provides power-ups for your Redux development workflow.\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { loggerMiddleware, apiMiddleware } from './middlewares'\n// import loggerMiddleware from './middlewares/loggerMiddleware'\n// import apiMiddleware from './middlewares/apiMiddleware'\nimport { monitorReducerEnhancer } from './enhencers'\nimport rootReducer from './rootReducer'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    // whitelist: ['serverConfig']\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(preloadedState) {\n\n    const middlewares = [loggerMiddleware, thunkMiddleware, apiMiddleware]\n    const middlewareEnhancer = applyMiddleware(...middlewares)\n    const enhancers = [middlewareEnhancer, monitorReducerEnhancer]\n    const composedEnhancers = composeWithDevTools(...enhancers)\n\n    const store = createStore(persistedReducer, preloadedState, composedEnhancers)\n    \n    return store\n}"]},"metadata":{},"sourceType":"module"}