{"ast":null,"code":"import produce from 'immer';\nimport _ from 'lodash';\nimport * as types from './types';\nconst serverConfigState = {\n  uid: '12345678',\n  providerList: null,\n  osList: null,\n  locationList: null,\n  sizesList: null,\n  sizePrice: null,\n  sizeDetails: null,\n  server: null,\n  serverSize: 0,\n  imageName: 'none',\n  instanceName: undefined,\n  location: 'none',\n  serverList: null,\n  message: {\n    type: null,\n    info: null\n  },\n  route: '/servers',\n  loader: {\n    status: false,\n    time: 0\n  },\n  progress: 0,\n  masterCredentialInfo: null\n};\nexport const serverConfig = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : serverConfigState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload,\n    successMessage,\n    errorMessage,\n    meta\n  } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case types.GET_SERVER_PROVIDER:\n        break;\n\n      case types.GET_SERVER_PROVIDER_SUCCESS:\n        draft.providerList = payload['Server Providers'];\n        break;\n\n      case types.GET_SERVER_PROVIDER_FAILED:\n        break;\n\n      case types.GET_PROVIDER_DETAILS:\n        break;\n\n      case types.GET_PROVIDER_DETAILS_SUCCESS:\n        draft.osList = _.map(payload['Server OS'], function (item) {\n          return _.merge(item, _.find(payload['Image Name'], {\n            'id': item.id\n          }));\n        });\n        draft.locationList = _.map(payload['Region Name'], function (item) {\n          return _.merge(item, _.find(payload['Server Location'], {\n            'id': item.id\n          }));\n        });\n        let sizesList_data = [{\n          value: 0,\n          label: \"-\"\n        }];\n        payload['Server Size'].forEach((size, index) => {\n          sizesList_data.push({ ...size,\n            value: index + 1,\n            label: size.sizes\n          });\n        });\n        draft.sizesList = sizesList_data;\n        break;\n\n      case types.GET_PROVIDER_DETAILS_FAILED:\n        break;\n\n      case types.GET_SERVER_SIZE_DETAILS:\n        console.log();\n        break;\n\n      case types.GET_SERVER_SIZE_DETAILS_SUCCESS:\n        draft.sizePrice = payload['Server Price'];\n        draft.sizeDetails = _.merge(payload['Server Details'], payload['Package Name']);\n        break;\n\n      case types.GET_SERVER_SIZE_DETAILS_FAILED:\n        draft.sizePrice = {\n          Monthly: 0,\n          Yearly: 0\n        };\n        draft.sizeDetails = null;\n        break;\n\n      case types.SAVE_SERVER_LAUNCH_INFO:\n        draft.imageName = payload.data.imageName;\n        draft.instanceName = payload.data.instanceName;\n        draft.server = payload.data.server;\n        draft.serverSize = payload.data.serverSize;\n        draft.location = payload.data.location;\n        break;\n\n      case types.RESET_SERVER_LAUNCH_INFO:\n        draft.instanceName = '';\n        draft.imageName = 'none';\n        draft.server = 'Linode';\n        draft.serverSize = 1;\n        draft.location = 'none';\n        draft.sizePrice = null;\n        draft.sizeDetails = null; // draft.route = '/servers'\n\n        break;\n\n      case types.DELETE_MESSAGE:\n        draft.message = serverConfigState.message;\n        break;\n\n      case types.DELETE_ROUTE:\n        draft.route = 'none';\n        break;\n\n      case types.SET_LOADER:\n        draft.loader = {\n          status: payload.status,\n          time: payload.time\n        };\n        break;\n\n      case types.SET_PROGRESS:\n        console.log(payload);\n        draft.progress = payload;\n        break;\n\n      case types.LAUNCH_NOW:\n        break;\n\n      case types.LAUNCH_NOW_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        draft.route = '/servers';\n        break;\n\n      case types.LAUNCH_NOW_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.SERVER_LIST:\n        break;\n\n      case types.SERVER_LIST_SUCCESS:\n        draft.serverList = payload;\n        break;\n\n      case types.SERVER_LIST_FAILED:\n        break;\n\n      case types.START_SERVER:\n        break;\n\n      case types.START_SERVER_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.START_SERVER_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.RESTART_SERVER:\n        break;\n\n      case types.RESTART_SERVER_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.RESTART_SERVER_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.STOP_SERVER:\n        break;\n\n      case types.STOP_SERVER_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.STOP_SERVER_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.DELETE_SERVER:\n        break;\n\n      case types.DELETE_SERVER_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.DELETE_SERVER_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.FETCH_MASTER_CREDENTIALS:\n        break;\n\n      case types.FETCH_MASTER_CREDENTIALS_SUCCESS:\n        draft.masterCredentialInfo = { ...payload['Master Credential'][0]\n        };\n        break;\n\n      case types.FETCH_MASTER_CREDENTIALS_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.BACKUP_SERVER:\n        break;\n\n      case types.BACKUP_SERVER_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.BACKUP_SERVER_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      case types.CHANGE_BACKUP_SERVER_STATUS:\n        break;\n\n      case types.CHANGE_BACKUP_SERVER_STATUS_SUCCESS:\n        draft.message = {\n          type: 'success',\n          info: successMessage\n        };\n        break;\n\n      case types.CHANGE_BACKUP_SERVER_STATUS_FAILED:\n        draft.message = {\n          type: 'error',\n          info: errorMessage\n        };\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\nconst dataStructure = {\n  // from manna vai\n  user: {},\n  role: {},\n  userRole: {},\n  UserProject: {\n    userId: null,\n    projectname: null\n  },\n  serverprovider: {\n    id: null,\n    name: null,\n    logo: null,\n    enable: null\n  },\n  serverprovidersizes: {\n    providerId: null,\n    sizeid: null\n  },\n  serverproviderlocations: {\n    providerId: null,\n    sizeid: null\n  },\n  size: {\n    id: null,\n    ramsize: null,\n    unit: null\n  },\n  location: {\n    id: null,\n    location: null\n  },\n  serverdetail: {\n    providerId: null,\n    size: 'sizeId',\n    location: 'locationid',\n    amount: null\n  },\n  UserProjectsServers: {\n    userid: null,\n    serverdetailId: null,\n    state: ['cart', 'orders', 'paid']\n  }\n};","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/serverResources/reducer.js"],"names":["produce","_","types","serverConfigState","uid","providerList","osList","locationList","sizesList","sizePrice","sizeDetails","server","serverSize","imageName","instanceName","undefined","location","serverList","message","type","info","route","loader","status","time","progress","masterCredentialInfo","serverConfig","state","action","payload","successMessage","errorMessage","meta","draft","GET_SERVER_PROVIDER","GET_SERVER_PROVIDER_SUCCESS","GET_SERVER_PROVIDER_FAILED","GET_PROVIDER_DETAILS","GET_PROVIDER_DETAILS_SUCCESS","map","item","merge","find","id","sizesList_data","value","label","forEach","size","index","push","sizes","GET_PROVIDER_DETAILS_FAILED","GET_SERVER_SIZE_DETAILS","console","log","GET_SERVER_SIZE_DETAILS_SUCCESS","GET_SERVER_SIZE_DETAILS_FAILED","Monthly","Yearly","SAVE_SERVER_LAUNCH_INFO","data","RESET_SERVER_LAUNCH_INFO","DELETE_MESSAGE","DELETE_ROUTE","SET_LOADER","SET_PROGRESS","LAUNCH_NOW","LAUNCH_NOW_SUCCESS","LAUNCH_NOW_FAILED","SERVER_LIST","SERVER_LIST_SUCCESS","SERVER_LIST_FAILED","START_SERVER","START_SERVER_SUCCESS","START_SERVER_FAILED","RESTART_SERVER","RESTART_SERVER_SUCCESS","RESTART_SERVER_FAILED","STOP_SERVER","STOP_SERVER_SUCCESS","STOP_SERVER_FAILED","DELETE_SERVER","DELETE_SERVER_SUCCESS","DELETE_SERVER_FAILED","FETCH_MASTER_CREDENTIALS","FETCH_MASTER_CREDENTIALS_SUCCESS","FETCH_MASTER_CREDENTIALS_FAILED","BACKUP_SERVER","BACKUP_SERVER_SUCCESS","BACKUP_SERVER_FAILED","CHANGE_BACKUP_SERVER_STATUS","CHANGE_BACKUP_SERVER_STATUS_SUCCESS","CHANGE_BACKUP_SERVER_STATUS_FAILED","dataStructure","user","role","userRole","UserProject","userId","projectname","serverprovider","name","logo","enable","serverprovidersizes","providerId","sizeid","serverproviderlocations","ramsize","unit","serverdetail","amount","UserProjectsServers","userid","serverdetailId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,iBAAiB,GAAG;AAEtBC,EAAAA,GAAG,EAAE,UAFiB;AAItBC,EAAAA,YAAY,EAAE,IAJQ;AAKtBC,EAAAA,MAAM,EAAE,IALc;AAMtBC,EAAAA,YAAY,EAAE,IANQ;AAOtBC,EAAAA,SAAS,EAAE,IAPW;AAStBC,EAAAA,SAAS,EAAE,IATW;AAUtBC,EAAAA,WAAW,EAAE,IAVS;AAYtBC,EAAAA,MAAM,EAAE,IAZc;AAatBC,EAAAA,UAAU,EAAE,CAbU;AAetBC,EAAAA,SAAS,EAAE,MAfW;AAgBtBC,EAAAA,YAAY,EAAEC,SAhBQ;AAiBtBC,EAAAA,QAAQ,EAAE,MAjBY;AAmBtBC,EAAAA,UAAU,EAAE,IAnBU;AAqBtBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,IADD;AAELC,IAAAA,IAAI,EAAE;AAFD,GArBa;AAyBtBC,EAAAA,KAAK,EAAE,UAzBe;AA0BtBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAC,KADH;AAEJC,IAAAA,IAAI,EAAE;AAFF,GA1Bc;AA8BtBC,EAAAA,QAAQ,EAAE,CA9BY;AAgCtBC,EAAAA,oBAAoB,EAAE;AAhCA,CAA1B;AAmCA,OAAO,MAAMC,YAAY,GAAG,YAAuC;AAAA,MAAtCC,KAAsC,uEAA9BzB,iBAA8B;AAAA,MAAX0B,MAAW;AAC/D,QAAM;AAAEV,IAAAA,IAAF;AAAQW,IAAAA,OAAR;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA;AAA/C,MAAwDJ,MAA9D;AACA,SAAO7B,OAAO,CAAC4B,KAAD,EAASM,KAAD,IAAW;AAC7B,YAAQf,IAAR;AAEI,WAAKjB,KAAK,CAACiC,mBAAX;AACI;;AACJ,WAAKjC,KAAK,CAACkC,2BAAX;AACIF,QAAAA,KAAK,CAAC7B,YAAN,GAAqByB,OAAO,CAAC,kBAAD,CAA5B;AACA;;AACJ,WAAK5B,KAAK,CAACmC,0BAAX;AACI;;AAEJ,WAAKnC,KAAK,CAACoC,oBAAX;AACI;;AACJ,WAAKpC,KAAK,CAACqC,4BAAX;AACIL,QAAAA,KAAK,CAAC5B,MAAN,GAAeL,CAAC,CAACuC,GAAF,CAAMV,OAAO,CAAC,WAAD,CAAb,EAA4B,UAAUW,IAAV,EAAgB;AACvD,iBAAOxC,CAAC,CAACyC,KAAF,CAAQD,IAAR,EAAcxC,CAAC,CAAC0C,IAAF,CAAOb,OAAO,CAAC,YAAD,CAAd,EAA8B;AAAE,kBAAMW,IAAI,CAACG;AAAb,WAA9B,CAAd,CAAP;AACH,SAFc,CAAf;AAGAV,QAAAA,KAAK,CAAC3B,YAAN,GAAqBN,CAAC,CAACuC,GAAF,CAAMV,OAAO,CAAC,aAAD,CAAb,EAA8B,UAAUW,IAAV,EAAgB;AAC/D,iBAAOxC,CAAC,CAACyC,KAAF,CAAQD,IAAR,EAAcxC,CAAC,CAAC0C,IAAF,CAAOb,OAAO,CAAC,iBAAD,CAAd,EAAmC;AAAE,kBAAMW,IAAI,CAACG;AAAb,WAAnC,CAAd,CAAP;AACH,SAFoB,CAArB;AAGA,YAAIC,cAAc,GAAG,CAAC;AAAEC,UAAAA,KAAK,EAAE,CAAT;AAAYC,UAAAA,KAAK,EAAE;AAAnB,SAAD,CAArB;AACAjB,QAAAA,OAAO,CAAC,aAAD,CAAP,CAAuBkB,OAAvB,CAA+B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5CL,UAAAA,cAAc,CAACM,IAAf,CAAoB,EAAE,GAAGF,IAAL;AAAWH,YAAAA,KAAK,EAAEI,KAAK,GAAG,CAA1B;AAA6BH,YAAAA,KAAK,EAAEE,IAAI,CAACG;AAAzC,WAApB;AACH,SAFD;AAGAlB,QAAAA,KAAK,CAAC1B,SAAN,GAAkBqC,cAAlB;AACA;;AACJ,WAAK3C,KAAK,CAACmD,2BAAX;AACI;;AAEJ,WAAKnD,KAAK,CAACoD,uBAAX;AACIC,QAAAA,OAAO,CAACC,GAAR;AACA;;AACJ,WAAKtD,KAAK,CAACuD,+BAAX;AACIvB,QAAAA,KAAK,CAACzB,SAAN,GAAkBqB,OAAO,CAAC,cAAD,CAAzB;AACAI,QAAAA,KAAK,CAACxB,WAAN,GAAoBT,CAAC,CAACyC,KAAF,CAAQZ,OAAO,CAAC,gBAAD,CAAf,EAAmCA,OAAO,CAAC,cAAD,CAA1C,CAApB;AACA;;AACJ,WAAK5B,KAAK,CAACwD,8BAAX;AACIxB,QAAAA,KAAK,CAACzB,SAAN,GAAkB;AAAEkD,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,MAAM,EAAE;AAAtB,SAAlB;AACA1B,QAAAA,KAAK,CAACxB,WAAN,GAAoB,IAApB;AACA;;AAEJ,WAAKR,KAAK,CAAC2D,uBAAX;AACI3B,QAAAA,KAAK,CAACrB,SAAN,GAAkBiB,OAAO,CAACgC,IAAR,CAAajD,SAA/B;AACAqB,QAAAA,KAAK,CAACpB,YAAN,GAAqBgB,OAAO,CAACgC,IAAR,CAAahD,YAAlC;AACAoB,QAAAA,KAAK,CAACvB,MAAN,GAAemB,OAAO,CAACgC,IAAR,CAAanD,MAA5B;AACAuB,QAAAA,KAAK,CAACtB,UAAN,GAAmBkB,OAAO,CAACgC,IAAR,CAAalD,UAAhC;AACAsB,QAAAA,KAAK,CAAClB,QAAN,GAAiBc,OAAO,CAACgC,IAAR,CAAa9C,QAA9B;AACA;;AAEJ,WAAKd,KAAK,CAAC6D,wBAAX;AACI7B,QAAAA,KAAK,CAACpB,YAAN,GAAqB,EAArB;AACAoB,QAAAA,KAAK,CAACrB,SAAN,GAAkB,MAAlB;AACAqB,QAAAA,KAAK,CAACvB,MAAN,GAAe,QAAf;AACAuB,QAAAA,KAAK,CAACtB,UAAN,GAAmB,CAAnB;AACAsB,QAAAA,KAAK,CAAClB,QAAN,GAAiB,MAAjB;AACAkB,QAAAA,KAAK,CAACzB,SAAN,GAAkB,IAAlB;AACAyB,QAAAA,KAAK,CAACxB,WAAN,GAAoB,IAApB,CAPJ,CAQI;;AACA;;AAEJ,WAAKR,KAAK,CAAC8D,cAAX;AACI9B,QAAAA,KAAK,CAAChB,OAAN,GAAgBf,iBAAiB,CAACe,OAAlC;AACA;;AAEJ,WAAKhB,KAAK,CAAC+D,YAAX;AACI/B,QAAAA,KAAK,CAACb,KAAN,GAAc,MAAd;AACA;;AAEJ,WAAKnB,KAAK,CAACgE,UAAX;AACIhC,QAAAA,KAAK,CAACZ,MAAN,GAAe;AAACC,UAAAA,MAAM,EAAEO,OAAO,CAACP,MAAjB;AAAyBC,UAAAA,IAAI,EAAEM,OAAO,CAACN;AAAvC,SAAf;AACA;;AAEJ,WAAKtB,KAAK,CAACiE,YAAX;AACIZ,QAAAA,OAAO,CAACC,GAAR,CAAY1B,OAAZ;AACAI,QAAAA,KAAK,CAACT,QAAN,GAAiBK,OAAjB;AACA;;AAEJ,WAAK5B,KAAK,CAACkE,UAAX;AACI;;AACJ,WAAKlE,KAAK,CAACmE,kBAAX;AACInC,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACAG,QAAAA,KAAK,CAACb,KAAN,GAAc,UAAd;AACA;;AACJ,WAAKnB,KAAK,CAACoE,iBAAX;AACIpC,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAACqE,WAAX;AACI;;AACJ,WAAKrE,KAAK,CAACsE,mBAAX;AACItC,QAAAA,KAAK,CAACjB,UAAN,GAAmBa,OAAnB;AACA;;AACJ,WAAK5B,KAAK,CAACuE,kBAAX;AACI;;AAEJ,WAAKvE,KAAK,CAACwE,YAAX;AACI;;AACJ,WAAKxE,KAAK,CAACyE,oBAAX;AACIzC,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAAC0E,mBAAX;AACI1C,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAAC2E,cAAX;AACI;;AACJ,WAAK3E,KAAK,CAAC4E,sBAAX;AACI5C,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAAC6E,qBAAX;AACI7C,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAAC8E,WAAX;AACI;;AACJ,WAAK9E,KAAK,CAAC+E,mBAAX;AACI/C,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAACgF,kBAAX;AACIhD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAACiF,aAAX;AACI;;AACJ,WAAKjF,KAAK,CAACkF,qBAAX;AACIlD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAACmF,oBAAX;AACInD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAACoF,wBAAX;AACI;;AACJ,WAAKpF,KAAK,CAACqF,gCAAX;AACIrD,QAAAA,KAAK,CAACR,oBAAN,GAA6B,EAAE,GAAGI,OAAO,CAAC,mBAAD,CAAP,CAA6B,CAA7B;AAAL,SAA7B;AACA;;AACJ,WAAK5B,KAAK,CAACsF,+BAAX;AACItD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAACuF,aAAX;AACI;;AACJ,WAAKvF,KAAK,CAACwF,qBAAX;AACIxD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAACyF,oBAAX;AACIzD,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ,WAAK9B,KAAK,CAAC0F,2BAAX;AACI;;AACJ,WAAK1F,KAAK,CAAC2F,mCAAX;AACI3D,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,SAAP;AAAkBC,UAAAA,IAAI,EAAEW;AAAxB,SAAhB;AACA;;AACJ,WAAK7B,KAAK,CAAC4F,kCAAX;AACI5D,QAAAA,KAAK,CAAChB,OAAN,GAAgB;AAACC,UAAAA,IAAI,EAAE,OAAP;AAAgBC,UAAAA,IAAI,EAAEY;AAAtB,SAAhB;AACA;;AAEJ;AACI,eAAOJ,KAAP;AA9JR;AAgKH,GAjKa,CAAd;AAkKH,CApKM;AA2KP,MAAMmE,aAAa,GAAG;AAElB;AACAC,EAAAA,IAAI,EAAE,EAHY;AAIlBC,EAAAA,IAAI,EAAE,EAJY;AAKlBC,EAAAA,QAAQ,EAAE,EALQ;AAMlBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,MAAM,EAAE,IADC;AAETC,IAAAA,WAAW,EAAE;AAFJ,GANK;AAUlBC,EAAAA,cAAc,EAAE;AACZ1D,IAAAA,EAAE,EAAE,IADQ;AAEZ2D,IAAAA,IAAI,EAAE,IAFM;AAGZC,IAAAA,IAAI,EAAE,IAHM;AAIZC,IAAAA,MAAM,EAAE;AAJI,GAVE;AAgBlBC,EAAAA,mBAAmB,EAAE;AACjBC,IAAAA,UAAU,EAAE,IADK;AAEjBC,IAAAA,MAAM,EAAE;AAFS,GAhBH;AAoBlBC,EAAAA,uBAAuB,EAAE;AACrBF,IAAAA,UAAU,EAAE,IADS;AAErBC,IAAAA,MAAM,EAAE;AAFa,GApBP;AAwBlB3D,EAAAA,IAAI,EAAE;AACFL,IAAAA,EAAE,EAAE,IADF;AAEFkE,IAAAA,OAAO,EAAE,IAFP;AAGFC,IAAAA,IAAI,EAAE;AAHJ,GAxBY;AA6BlB/F,EAAAA,QAAQ,EAAE;AACN4B,IAAAA,EAAE,EAAE,IADE;AAEN5B,IAAAA,QAAQ,EAAE;AAFJ,GA7BQ;AAiClBgG,EAAAA,YAAY,EAAE;AACVL,IAAAA,UAAU,EAAE,IADF;AAEV1D,IAAAA,IAAI,EAAE,QAFI;AAGVjC,IAAAA,QAAQ,EAAE,YAHA;AAIViG,IAAAA,MAAM,EAAE;AAJE,GAjCI;AAuClBC,EAAAA,mBAAmB,EAAE;AACjBC,IAAAA,MAAM,EAAE,IADS;AAEjBC,IAAAA,cAAc,EAAE,IAFC;AAGjBxF,IAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB;AAHU;AAvCH,CAAtB","sourcesContent":["import produce from 'immer';\nimport _ from 'lodash'\nimport * as types from './types';\n\nconst serverConfigState = {\n\n    uid: '12345678',\n\n    providerList: null,\n    osList: null,\n    locationList: null,\n    sizesList: null,\n\n    sizePrice: null,\n    sizeDetails: null,\n\n    server: null,\n    serverSize: 0,\n\n    imageName: 'none',\n    instanceName: undefined,\n    location: 'none',\n\n    serverList: null,\n\n    message: {\n        type: null,\n        info: null,\n    },\n    route: '/servers',\n    loader: {\n        status:false,\n        time: 0\n    },\n    progress: 0,\n\n    masterCredentialInfo: null,\n}\n\nexport const serverConfig = (state = serverConfigState, action) => {\n    const { type, payload, successMessage, errorMessage, meta } = action;\n    return produce(state, (draft) => {\n        switch (type) {\n\n            case types.GET_SERVER_PROVIDER:\n                break;\n            case types.GET_SERVER_PROVIDER_SUCCESS:\n                draft.providerList = payload['Server Providers']\n                break;\n            case types.GET_SERVER_PROVIDER_FAILED:\n                break;\n\n            case types.GET_PROVIDER_DETAILS:\n                break;\n            case types.GET_PROVIDER_DETAILS_SUCCESS:\n                draft.osList = _.map(payload['Server OS'], function (item) {\n                    return _.merge(item, _.find(payload['Image Name'], { 'id': item.id }));\n                });\n                draft.locationList = _.map(payload['Region Name'], function (item) {\n                    return _.merge(item, _.find(payload['Server Location'], { 'id': item.id }));\n                });\n                let sizesList_data = [{ value: 0, label: \"-\" }]\n                payload['Server Size'].forEach((size, index) => {\n                    sizesList_data.push({ ...size, value: index + 1, label: size.sizes })\n                })\n                draft.sizesList = sizesList_data\n                break;\n            case types.GET_PROVIDER_DETAILS_FAILED:\n                break;\n\n            case types.GET_SERVER_SIZE_DETAILS:\n                console.log()\n                break;\n            case types.GET_SERVER_SIZE_DETAILS_SUCCESS:\n                draft.sizePrice = payload['Server Price']\n                draft.sizeDetails = _.merge(payload['Server Details'], payload['Package Name']);\n                break;\n            case types.GET_SERVER_SIZE_DETAILS_FAILED:\n                draft.sizePrice = { Monthly: 0, Yearly: 0 }\n                draft.sizeDetails = null\n                break;\n\n            case types.SAVE_SERVER_LAUNCH_INFO:\n                draft.imageName = payload.data.imageName\n                draft.instanceName = payload.data.instanceName\n                draft.server = payload.data.server\n                draft.serverSize = payload.data.serverSize\n                draft.location = payload.data.location\n                break;\n\n            case types.RESET_SERVER_LAUNCH_INFO:\n                draft.instanceName = ''\n                draft.imageName = 'none'\n                draft.server = 'Linode'\n                draft.serverSize = 1\n                draft.location = 'none'\n                draft.sizePrice = null\n                draft.sizeDetails = null\n                // draft.route = '/servers'\n                break;\n\n            case types.DELETE_MESSAGE:\n                draft.message = serverConfigState.message\n                break;\n\n            case types.DELETE_ROUTE:\n                draft.route = 'none'\n                break;\n\n            case types.SET_LOADER:\n                draft.loader = {status: payload.status, time: payload.time}\n                break;\n\n            case types.SET_PROGRESS:\n                console.log(payload)\n                draft.progress = payload\n                break;\n\n            case types.LAUNCH_NOW:\n                break;\n            case types.LAUNCH_NOW_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                draft.route = '/servers'\n                break;\n            case types.LAUNCH_NOW_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.SERVER_LIST:\n                break;\n            case types.SERVER_LIST_SUCCESS:\n                draft.serverList = payload\n                break;\n            case types.SERVER_LIST_FAILED:\n                break;\n\n            case types.START_SERVER:\n                break;\n            case types.START_SERVER_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.START_SERVER_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.RESTART_SERVER:\n                break;\n            case types.RESTART_SERVER_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.RESTART_SERVER_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.STOP_SERVER:\n                break;\n            case types.STOP_SERVER_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.STOP_SERVER_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.DELETE_SERVER:\n                break;\n            case types.DELETE_SERVER_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.DELETE_SERVER_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.FETCH_MASTER_CREDENTIALS:\n                break;\n            case types.FETCH_MASTER_CREDENTIALS_SUCCESS:\n                draft.masterCredentialInfo = { ...payload['Master Credential'][0] }\n                break;\n            case types.FETCH_MASTER_CREDENTIALS_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.BACKUP_SERVER:\n                break;\n            case types.BACKUP_SERVER_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.BACKUP_SERVER_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            case types.CHANGE_BACKUP_SERVER_STATUS:\n                break;\n            case types.CHANGE_BACKUP_SERVER_STATUS_SUCCESS:\n                draft.message = {type: 'success', info: successMessage}\n                break;\n            case types.CHANGE_BACKUP_SERVER_STATUS_FAILED:\n                draft.message = {type: 'error', info: errorMessage}\n                break;\n\n            default:\n                return state;\n        }\n    });\n}\n\n\n\n\n\n\nconst dataStructure = {\n\n    // from manna vai\n    user: {},\n    role: {},\n    userRole: {},\n    UserProject: {\n        userId: null,\n        projectname: null,\n    },\n    serverprovider: {\n        id: null,\n        name: null,\n        logo: null,\n        enable: null,\n    },\n    serverprovidersizes: {\n        providerId: null,\n        sizeid: null\n    },\n    serverproviderlocations: {\n        providerId: null,\n        sizeid: null,\n    },\n    size: {\n        id: null,\n        ramsize: null,\n        unit: null\n    },\n    location: {\n        id: null,\n        location: null,\n    },\n    serverdetail: {\n        providerId: null,\n        size: 'sizeId',\n        location: 'locationid',\n        amount: null,\n    },\n    UserProjectsServers: {\n        userid: null,\n        serverdetailId: null,\n        state: ['cart', 'orders', 'paid'],\n    }\n}"]},"metadata":{},"sourceType":"module"}