{"ast":null,"code":"import produce from 'immer';\nimport { userLogin } from '.';\nimport * as types from './types';\nconst authInfoState = {\n  logger: {},\n  msg: ''\n};\nexport const authInfo = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : authInfoState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload,\n    meta\n  } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case types.SAVE_USER_INFO:\n        break;\n\n      case types.SAVE_USER_INFO_SUCCESS:\n        draft.msg = meta.successMessage;\n        break;\n\n      case types.SAVE_USER_INFO_FAILED:\n        draft.msg = meta.errorMessage;\n        break;\n\n      case types.USER_LOGIN:\n        break;\n\n      case types.USER_LOGIN_SUCCESS:\n        console.log(payload);\n        draft.msg = meta.successMessage;\n        break;\n\n      case types.USER_LOGIN_FAILED:\n        draft.msg = meta.errorMessage;\n        break;\n\n      case types.SET_MSG:\n        draft.msg = payload;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/authResources/reducer.js"],"names":["produce","userLogin","types","authInfoState","logger","msg","authInfo","state","action","type","payload","meta","draft","SAVE_USER_INFO","SAVE_USER_INFO_SUCCESS","successMessage","SAVE_USER_INFO_FAILED","errorMessage","USER_LOGIN","USER_LOGIN_SUCCESS","console","log","USER_LOGIN_FAILED","SET_MSG"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,SAAT,QAA0B,GAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,EADU;AAElBC,EAAAA,GAAG,EAAE;AAFa,CAAtB;AAKA,OAAO,MAAMC,QAAQ,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BJ,aAA0B;AAAA,MAAXK,MAAW;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA0BH,MAAhC;AACA,SAAOR,OAAO,CAACO,KAAD,EAASK,KAAD,IAAW;AAC7B,YAAQH,IAAR;AAEI,WAAKP,KAAK,CAACW,cAAX;AACI;;AACJ,WAAKX,KAAK,CAACY,sBAAX;AACIF,QAAAA,KAAK,CAACP,GAAN,GAAYM,IAAI,CAACI,cAAjB;AACA;;AACJ,WAAKb,KAAK,CAACc,qBAAX;AACIJ,QAAAA,KAAK,CAACP,GAAN,GAAYM,IAAI,CAACM,YAAjB;AACA;;AAEJ,WAAKf,KAAK,CAACgB,UAAX;AACI;;AACJ,WAAKhB,KAAK,CAACiB,kBAAX;AACIC,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACAE,QAAAA,KAAK,CAACP,GAAN,GAAYM,IAAI,CAACI,cAAjB;AACA;;AACJ,WAAKb,KAAK,CAACoB,iBAAX;AACIV,QAAAA,KAAK,CAACP,GAAN,GAAYM,IAAI,CAACM,YAAjB;AACA;;AAEJ,WAAKf,KAAK,CAACqB,OAAX;AACIX,QAAAA,KAAK,CAACP,GAAN,GAAYK,OAAZ;AACA;;AACJ;AACI,eAAOH,KAAP;AAzBR;AA4BH,GA7Ba,CAAd;AA8BH,CAhCM","sourcesContent":["import produce from 'immer';\nimport { userLogin } from '.';\nimport * as types from './types';\n\nconst authInfoState = {\n    logger: {},\n    msg: '',\n}\n\nexport const authInfo = (state = authInfoState, action) => {\n    const { type, payload, meta } = action;\n    return produce(state, (draft) => {\n        switch (type) {\n\n            case types.SAVE_USER_INFO:\n                break;\n            case types.SAVE_USER_INFO_SUCCESS:\n                draft.msg = meta.successMessage\n                break;\n            case types.SAVE_USER_INFO_FAILED:\n                draft.msg = meta.errorMessage\n                break;\n\n            case types.USER_LOGIN:\n                break;\n            case types.USER_LOGIN_SUCCESS:\n                console.log(payload)\n                draft.msg = meta.successMessage\n                break;\n            case types.USER_LOGIN_FAILED:\n                draft.msg = meta.errorMessage\n                break;\n\n            case types.SET_MSG:\n                draft.msg = payload\n                break;\n            default:\n                return state;\n\n        }\n    });\n}"]},"metadata":{},"sourceType":"module"}