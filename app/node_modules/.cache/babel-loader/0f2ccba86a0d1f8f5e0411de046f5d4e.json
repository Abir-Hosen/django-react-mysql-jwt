{"ast":null,"code":"import * as types from './types';\nexport const registerUser = () => ({\n  type: types.GET_SERVER_PROVIDER,\n  payload: {\n    path: `/serverproviders/all/details`,\n    method: 'GET'\n  },\n  meta: {\n    api: true,\n    successMessage: 'Server provider fetch successfully',\n    errorMessage: \"Server  provider failed to fetch\"\n  }\n}); // // common state control actions\n// export const deleteMessage = () => ({\n//     type: types.DELETE_MESSAGE,\n//     meta: {\n//         api: false,\n//         successMessage: 'Message deleted successfully',\n//         errorMessage: \"Message failed to delete\",\n//     },\n// });\n// export const deleteRoute = () => ({\n//     type: types.DELETE_ROUTE,\n//     meta: {\n//         api: false,\n//         successMessage: 'Route deleted successfully',\n//         errorMessage: \"Route failed to delete\",\n//     },\n// });\n// export const setLoader = (status, time) => ({\n//     type: types.SET_LOADER,\n//     payload : {\n//         status: status,\n//         time: time\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Loader seted successfully',\n//         errorMessage: \"Loader failed to set\",\n//     },\n// });\n// export const setProgress = (payload) => ({\n//     type: types.SET_PROGRESS,\n//     payload : payload,\n//     meta: {\n//         api: false,\n//         successMessage: 'progress seted successfully',\n//         errorMessage: \"progress failed to set\",\n//     },\n// });\n// // api control actions\n// export const getProviderList = () => ({\n//     type: types.GET_SERVER_PROVIDER,\n//     payload: {\n//         path: `/serverproviders/all/details`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server provider fetch successfully',\n//         errorMessage: \"Server  provider failed to fetch\",\n//     },\n// });\n// export const getProviderDetails = (payload) => ({\n//     type: types.GET_PROVIDER_DETAILS,\n//     payload: {\n//         path: `/serverproviders/os/size/location/details?Provider_ID=${payload}`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server os fetch successfully',\n//         errorMessage: \"Server  os failed to fetch\",\n//     },\n// });\n// export const getServerSizeDetails = (providerId, sizeId) => ({\n//     type: types.GET_SERVER_SIZE_DETAILS,\n//     payload: {\n//         path: `/serverproviders/size/price/details?Provider_ID=${providerId}&Size_ID=${sizeId}`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server size details fetch successfully',\n//         errorMessage: \"Server  size details failed to fetch\",\n//     },\n// });\n// export const saveLaunchServerInfo = (payload) => ({\n//     type: types.SAVE_SERVER_LAUNCH_INFO,\n//     payload: {\n//         data: payload\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Server data saved successfully',\n//         errorMessage: \"Server data failed to save\",\n//     },\n// });\n// export const resetLaunchServerInfo = (payload) => ({\n//     type: types.RESET_SERVER_LAUNCH_INFO,\n//     payload: {\n//         data: payload,\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Server data reset successfully',\n//         errorMessage: \"Server data failed to reset\",\n//     },\n// });\n// export const launchNow = (parameter) => ({\n//     type: types.LAUNCH_NOW,\n//     payload: {\n//         path: `/instance/create?${parameter}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server launch successfully',\n//         errorMessage: \"Server  failed to launch\",\n//     },\n// });\n// export const getServerList = () => ({\n//     type: types.SERVER_LIST,\n//     payload: {\n//         path: `/instance/list/all`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server list fetch successfully',\n//         errorMessage: \"Server list failed to fetch\",\n//     },\n// });\n// export const startServer = (provider, instance) => ({\n//     type: types.START_SERVER,\n//     payload: {\n//         path: `/instance/boot?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Start successfully',\n//         errorMessage: \"Server failed to Start\",\n//     },\n// });\n// export const restartServer = (provider, instance) => ({\n//     type: types.RESTART_SERVER,\n//     payload: {\n//         path: `/instance/reboot?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Restart successfully',\n//         errorMessage: \"Server failed to Restart\",\n//     },\n// });\n// export const stopServer = (provider, instance) => ({\n//     type: types.STOP_SERVER,\n//     payload: {\n//         path: `/instance/shutdown?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Stop successfully',\n//         errorMessage: \"Server failed to Stop\",\n//     },\n// });\n// export const deleteServer = (provider, instance) => ({\n//     type: types.DELETE_SERVER,\n//     payload: {\n//         path: `/instance/delete?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Deleted successfully',\n//         errorMessage: \"Server failed to Delete\",\n//     },\n// });\n// export const fetchMasterCredentials = (instanceId) => ({\n//     type: types.FETCH_MASTER_CREDENTIALS,\n//     payload: {\n//         path: `/instance/master/credential?Instance_ID=${instanceId}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Master credential fetch successfully',\n//         errorMessage: \"Master credential failed to fetch\",\n//     },\n// });\n// export const backupServer = (providerId, instanceId, snapName) => ({\n//     type: types.BACKUP_SERVER,\n//     payload: {\n//         path: `/instance/snapshot?Provider_ID=${providerId}&Instance_ID=${instanceId}&Snapshot_Name=${snapName}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server backup successfll',\n//         errorMessage: \"Backup server failed\",\n//     },\n// });\n// export const changeBackupServerStatus = (providerId, instanceId, status) => ({\n//     type: types.CHANGE_BACKUP_SERVER_STATUS,\n//     payload: {\n//         path: `/instance/backup?Provider_ID=${providerId}&Instance_ID=${instanceId}&Enable=${status}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: `Server backup ${status ? 'enabled ' : 'disabled '} successflly`,\n//         errorMessage: `Backup server failed to ${status ? 'enable' : 'disable'}`,\n//     },\n// });","map":{"version":3,"sources":["/home/abir/Documents/personal/djiango-react-mysql-jwt/app/src/common/redux/resources/serverResources/action.js"],"names":["types","registerUser","type","GET_SERVER_PROVIDER","payload","path","method","meta","api","successMessage","errorMessage"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,OAAO;AAC/BC,EAAAA,IAAI,EAAEF,KAAK,CAACG,mBADmB;AAE/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAG,8BADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFsB;AAM/BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,GAAG,EAAE,IADH;AAEFC,IAAAA,cAAc,EAAE,oCAFd;AAGFC,IAAAA,YAAY,EAAE;AAHZ;AANyB,CAAP,CAArB,C,CAasourcesContent":["import * as types from './types';\n\nexport const registerUser = () => ({\n    type: types.GET_SERVER_PROVIDER,\n    payload: {\n        path: `/serverproviders/all/details`,\n        method: 'GET',\n    },\n    meta: {\n        api: true,\n        successMessage: 'Server provider fetch successfully',\n        errorMessage: \"Server  provider failed to fetch\",\n    },\n});\n\n// // common state control actions\n// export const deleteMessage = () => ({\n//     type: types.DELETE_MESSAGE,\n//     meta: {\n//         api: false,\n//         successMessage: 'Message deleted successfully',\n//         errorMessage: \"Message failed to delete\",\n//     },\n// });\n\n// export const deleteRoute = () => ({\n//     type: types.DELETE_ROUTE,\n//     meta: {\n//         api: false,\n//         successMessage: 'Route deleted successfully',\n//         errorMessage: \"Route failed to delete\",\n//     },\n// });\n// export const setLoader = (status, time) => ({\n//     type: types.SET_LOADER,\n//     payload : {\n//         status: status,\n//         time: time\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Loader seted successfully',\n//         errorMessage: \"Loader failed to set\",\n//     },\n// });\n// export const setProgress = (payload) => ({\n//     type: types.SET_PROGRESS,\n//     payload : payload,\n//     meta: {\n//         api: false,\n//         successMessage: 'progress seted successfully',\n//         errorMessage: \"progress failed to set\",\n//     },\n// });\n\n// // api control actions\n// export const getProviderList = () => ({\n//     type: types.GET_SERVER_PROVIDER,\n//     payload: {\n//         path: `/serverproviders/all/details`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server provider fetch successfully',\n//         errorMessage: \"Server  provider failed to fetch\",\n//     },\n// });\n\n// export const getProviderDetails = (payload) => ({\n//     type: types.GET_PROVIDER_DETAILS,\n//     payload: {\n//         path: `/serverproviders/os/size/location/details?Provider_ID=${payload}`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server os fetch successfully',\n//         errorMessage: \"Server  os failed to fetch\",\n//     },\n// });\n\n// export const getServerSizeDetails = (providerId, sizeId) => ({\n//     type: types.GET_SERVER_SIZE_DETAILS,\n//     payload: {\n//         path: `/serverproviders/size/price/details?Provider_ID=${providerId}&Size_ID=${sizeId}`,\n//         method: 'GET',\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server size details fetch successfully',\n//         errorMessage: \"Server  size details failed to fetch\",\n//     },\n// });\n\n// export const saveLaunchServerInfo = (payload) => ({\n//     type: types.SAVE_SERVER_LAUNCH_INFO,\n//     payload: {\n//         data: payload\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Server data saved successfully',\n//         errorMessage: \"Server data failed to save\",\n//     },\n// });\n\n// export const resetLaunchServerInfo = (payload) => ({\n//     type: types.RESET_SERVER_LAUNCH_INFO,\n//     payload: {\n//         data: payload,\n//     },\n//     meta: {\n//         api: false,\n//         successMessage: 'Server data reset successfully',\n//         errorMessage: \"Server data failed to reset\",\n//     },\n// });\n\n// export const launchNow = (parameter) => ({\n//     type: types.LAUNCH_NOW,\n//     payload: {\n//         path: `/instance/create?${parameter}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server launch successfully',\n//         errorMessage: \"Server  failed to launch\",\n//     },\n// });\n\n// export const getServerList = () => ({\n//     type: types.SERVER_LIST,\n//     payload: {\n//         path: `/instance/list/all`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server list fetch successfully',\n//         errorMessage: \"Server list failed to fetch\",\n//     },\n// });\n\n// export const startServer = (provider, instance) => ({\n//     type: types.START_SERVER,\n//     payload: {\n//         path: `/instance/boot?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Start successfully',\n//         errorMessage: \"Server failed to Start\",\n//     },\n// });\n\n\n// export const restartServer = (provider, instance) => ({\n//     type: types.RESTART_SERVER,\n//     payload: {\n//         path: `/instance/reboot?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Restart successfully',\n//         errorMessage: \"Server failed to Restart\",\n//     },\n// });\n\n\n// export const stopServer = (provider, instance) => ({\n//     type: types.STOP_SERVER,\n//     payload: {\n//         path: `/instance/shutdown?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Stop successfully',\n//         errorMessage: \"Server failed to Stop\",\n//     },\n// });\n\n// export const deleteServer = (provider, instance) => ({\n//     type: types.DELETE_SERVER,\n//     payload: {\n//         path: `/instance/delete?Provider_ID=${provider}&Instance_ID=${instance}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server Deleted successfully',\n//         errorMessage: \"Server failed to Delete\",\n//     },\n// });\n\n// export const fetchMasterCredentials = (instanceId) => ({\n//     type: types.FETCH_MASTER_CREDENTIALS,\n//     payload: {\n//         path: `/instance/master/credential?Instance_ID=${instanceId}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Master credential fetch successfully',\n//         errorMessage: \"Master credential failed to fetch\",\n//     },\n// });\n\n// export const backupServer = (providerId, instanceId, snapName) => ({\n//     type: types.BACKUP_SERVER,\n//     payload: {\n//         path: `/instance/snapshot?Provider_ID=${providerId}&Instance_ID=${instanceId}&Snapshot_Name=${snapName}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: 'Server backup successfll',\n//         errorMessage: \"Backup server failed\",\n//     },\n// });\n\n// export const changeBackupServerStatus = (providerId, instanceId, status) => ({\n//     type: types.CHANGE_BACKUP_SERVER_STATUS,\n//     payload: {\n//         path: `/instance/backup?Provider_ID=${providerId}&Instance_ID=${instanceId}&Enable=${status}`,\n//         method: 'POST'\n//     },\n//     meta: {\n//         api: true,\n//         successMessage: `Server backup ${status ? 'enabled ' : 'disabled '} successflly`,\n//         errorMessage: `Backup server failed to ${status ? 'enable' : 'disable'}`,\n//     },\n// });\n\n\n\n"]},"metadata":{},"sourceType":"module"}